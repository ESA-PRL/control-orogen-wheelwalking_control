name "wheelwalking_control"
# Optionally declare the version number
# version "0.1"

using_library "exoter_kinematics"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "wheelwalking_controlTypes.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
# using_library "wheelwalking_control"
# import_types_from "wheelwalking_control/CustomType.hpp"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "base"
import_types_from "controldev"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the wheelwalking_control namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    # A configuration property (here, a std::string). Its value can be retrieved
    # in the C++ code with # _config_value.get() and _config_value.set(new_value).
    # property "config_value", "/std/string"

    property('joint_commands_names', '/std/vector<std/string>').
        doc 'Required commanding joint names in that order. Joint dispatcher is searching by names.'

    property('joint_readings_names', '/std/vector<std/string>').
        doc 'Required reading joint names in that order. Joint dispatcher is searching by names.'

    property('initial_gait', 'std/string').
        doc 'Initial gait (either AXLE_BY_AXLE, SIDE_BY_SIDE, EVEN_ODD, SINGLE_WHEEL or NORMAL_DRIVING)'

    property('discrete_speed', 'double').
        doc 'Initial discrete speed setting in m/s. Will get limited to +-MAX_SPEED (set in the code).'

    property('offset_speed', 'double').
        doc 'Initial offset speed setting in m/s. Will get limited to +-MAX_OFFSET_SPEED (set in the code).'

    property('step_length', 'double').
        doc 'Initial step length setting in m. Will get limited to MIN/MAX_STEP_LENGTH (set in the code).'

    property('disabled_walking_joints', '/std/vector<std/string>').
	doc 'List of non-moving walking joints. Used to test adaptability of the kinematic model.'

    # An input port, i.e. an object from which the component gets data from
    # other components' outputs
    #
    # Data can be retrieved using _input.read(value), which returns true if data
    # was available, and false otherwise. _input.connected() returns if this
    # input is connected to an output or not.
    input_port "joystick_commands", "controldev/RawCommand"
    input_port "joint_readings", "base/samples/Joints"
    input_port "kill_switch", "bool"
    input_port "resetDepJoints", "bool"

    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.
    output_port "joint_commands", "base/commands/Joints"

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    port_driven
    # port_driven # commented this port to check if CAN bus does not get overloaded
    # By default, the task will be periodic with a period of 0.1
    # periodic 0.05
end

