/* Generated from orogen/lib/orogen/templates/tasks/Task.cpp */

#include "Task.hpp"

using namespace wheelwalking_control;
using namespace exoter;

Task::Task(std::string const& name)
    : TaskBase(name)
{
    wwCtrl = new ExoterWheelWalking(0, 0.05, 0.07);
}

Task::Task(std::string const& name, RTT::ExecutionEngine* engine)
    : TaskBase(name, engine)
{
}

Task::~Task()
{
    delete wwCtrl;
}



/// The following lines are template definitions for the various state machine
// hooks defined by Orocos::RTT. See Task.hpp for more detailed
// documentation about them.

bool Task::configureHook()
{
    if (! TaskBase::configureHook())
        return false;
    return true;
}
bool Task::startHook()
{
    if (! TaskBase::startHook())
        return false;
    return true;
}
void Task::updateHook()
{
    TaskBase::updateHook();

    base::samples::Joints joints_readings;
    base::commands::Joints joints_commands;

    //TODO: read motion input

    //read joint positions
    _joints_readings.read(joints_readings);

    std::vector<double> joints_positions;
    joints_positions.resize(EXOTER_JOINT_DOF);

    //TODO: Extract passive joint positions.

    for (int i = 0; i < NUMBER_OF_ACTIVE_JOINTS; i++)
        joints_positions[i + 3] = _joints_readings[i].position;



    wwCtrl->computeActuatedJointVelocities(0.01, joints_positions);

    //write velocities as output
}
void Task::errorHook()
{
    TaskBase::errorHook();
}
void Task::stopHook()
{
    TaskBase::stopHook();
}
void Task::cleanupHook()
{
    TaskBase::cleanupHook();
}
